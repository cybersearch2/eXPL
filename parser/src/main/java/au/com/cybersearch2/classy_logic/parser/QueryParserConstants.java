/* Generated By:JavaCC: Do not edit this line. QueryParserConstants.java */
package au.com.cybersearch2.classy_logic.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QueryParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 6;
  /** RegularExpression Id. */
  int DOUBLE = 7;
  /** RegularExpression Id. */
  int DECIMAL = 8;
  /** RegularExpression Id. */
  int BOOLEAN = 9;
  /** RegularExpression Id. */
  int STRING = 10;
  /** RegularExpression Id. */
  int TEMPLATE = 11;
  /** RegularExpression Id. */
  int AXIOM = 12;
  /** RegularExpression Id. */
  int REGEX = 13;
  /** RegularExpression Id. */
  int INCLUDE = 14;
  /** RegularExpression Id. */
  int SCOPE = 15;
  /** RegularExpression Id. */
  int QUERY = 16;
  /** RegularExpression Id. */
  int CALC = 17;
  /** RegularExpression Id. */
  int LIST = 18;
  /** RegularExpression Id. */
  int FACT = 19;
  /** RegularExpression Id. */
  int LENGTH = 20;
  /** RegularExpression Id. */
  int TERM = 21;
  /** RegularExpression Id. */
  int RESOURCE = 22;
  /** RegularExpression Id. */
  int CURRENCY = 23;
  /** RegularExpression Id. */
  int FORMAT = 24;
  /** RegularExpression Id. */
  int LOCAL = 25;
  /** RegularExpression Id. */
  int CHOICE = 26;
  /** RegularExpression Id. */
  int PARAMETER = 27;
  /** RegularExpression Id. */
  int unix_lines = 28;
  /** RegularExpression Id. */
  int case_insensitive = 29;
  /** RegularExpression Id. */
  int comments = 30;
  /** RegularExpression Id. */
  int multiline = 31;
  /** RegularExpression Id. */
  int literal = 32;
  /** RegularExpression Id. */
  int dotall = 33;
  /** RegularExpression Id. */
  int unicode_case = 34;
  /** RegularExpression Id. */
  int canon_eq = 35;
  /** RegularExpression Id. */
  int unicode_character_class = 36;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 37;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 38;
  /** RegularExpression Id. */
  int HEX_LITERAL = 39;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 40;
  /** RegularExpression Id. */
  int EXPONENT = 41;
  /** RegularExpression Id. */
  int STRING_LITERAL = 42;
  /** RegularExpression Id. */
  int TRUE = 43;
  /** RegularExpression Id. */
  int FALSE = 44;
  /** RegularExpression Id. */
  int UNKNOWN = 45;
  /** RegularExpression Id. */
  int NAN = 46;
  /** RegularExpression Id. */
  int IDENTIFIER = 47;
  /** RegularExpression Id. */
  int LPAREN = 48;
  /** RegularExpression Id. */
  int RPAREN = 49;
  /** RegularExpression Id. */
  int LBRACE = 50;
  /** RegularExpression Id. */
  int RBRACE = 51;
  /** RegularExpression Id. */
  int LBRACKET = 52;
  /** RegularExpression Id. */
  int RBRACKET = 53;
  /** RegularExpression Id. */
  int SEMICOLON = 54;
  /** RegularExpression Id. */
  int COMMA = 55;
  /** RegularExpression Id. */
  int DOT = 56;
  /** RegularExpression Id. */
  int RARROW = 57;
  /** RegularExpression Id. */
  int LARROW = 58;
  /** RegularExpression Id. */
  int ASSIGN = 59;
  /** RegularExpression Id. */
  int LT = 60;
  /** RegularExpression Id. */
  int BANG = 61;
  /** RegularExpression Id. */
  int COLON = 62;
  /** RegularExpression Id. */
  int QMARK = 63;
  /** RegularExpression Id. */
  int EQ = 64;
  /** RegularExpression Id. */
  int LE = 65;
  /** RegularExpression Id. */
  int GE = 66;
  /** RegularExpression Id. */
  int NE = 67;
  /** RegularExpression Id. */
  int SC_OR = 68;
  /** RegularExpression Id. */
  int SC_AND = 69;
  /** RegularExpression Id. */
  int INCR = 70;
  /** RegularExpression Id. */
  int DECR = 71;
  /** RegularExpression Id. */
  int PLUS = 72;
  /** RegularExpression Id. */
  int MINUS = 73;
  /** RegularExpression Id. */
  int STAR = 74;
  /** RegularExpression Id. */
  int SLASH = 75;
  /** RegularExpression Id. */
  int BIT_AND = 76;
  /** RegularExpression Id. */
  int BIT_OR = 77;
  /** RegularExpression Id. */
  int XOR = 78;
  /** RegularExpression Id. */
  int REM = 79;
  /** RegularExpression Id. */
  int LSHIFT = 80;
  /** RegularExpression Id. */
  int PLUSASSIGN = 81;
  /** RegularExpression Id. */
  int MINUSASSIGN = 82;
  /** RegularExpression Id. */
  int STARASSIGN = 83;
  /** RegularExpression Id. */
  int SLASHASSIGN = 84;
  /** RegularExpression Id. */
  int ANDASSIGN = 85;
  /** RegularExpression Id. */
  int ORASSIGN = 86;
  /** RegularExpression Id. */
  int XORASSIGN = 87;
  /** RegularExpression Id. */
  int REMASSIGN = 88;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 89;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 90;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 91;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 92;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 93;
  /** RegularExpression Id. */
  int GT = 94;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"integer\"",
    "\"double\"",
    "\"decimal\"",
    "\"boolean\"",
    "\"string\"",
    "\"template\"",
    "\"axiom\"",
    "\"regex\"",
    "\"include\"",
    "\"scope\"",
    "\"query\"",
    "\"calc\"",
    "\"list\"",
    "\"fact\"",
    "\"length\"",
    "\"term\"",
    "\"resource\"",
    "\"currency\"",
    "\"format\"",
    "\"local\"",
    "\"choice\"",
    "\"parameter\"",
    "\"unix_lines\"",
    "\"case_insensitive\"",
    "\"comments\"",
    "\"multiline\"",
    "\"literal\"",
    "\"dotall\"",
    "\"unicode_case\"",
    "\"canon_eq\"",
    "\"unicode_character_class\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "\"true\"",
    "\"false\"",
    "\"unknown\"",
    "\"NaN\"",
    "<IDENTIFIER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"->\"",
    "\"<-\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\":\"",
    "\"?\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"$\"",
    "\"~\"",
  };

}
